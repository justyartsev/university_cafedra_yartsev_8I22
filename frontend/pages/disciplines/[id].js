import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useRouter } from 'next/router';

const DisciplineDetail = () => {
  const router = useRouter();
  const { id } = router.query;
  const [discipline, setDiscipline] = useState(null);
  const [professors, setProfessors] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [selectedProfessor, setSelectedProfessor] = useState('');
  const [teachingTypes, setTeachingTypes] = useState({
    '–õ–µ–∫—Ü–∏–∏': false,
    '–ü—Ä–∞–∫—Ç–∏–∫–∏': false,
    '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ': false,
  });

  useEffect(() => {
    if (id) {
      const fetchDiscipline = async () => {
        try {
          const response = await axios.get(`http://localhost:8000/api/disciplines/${id}/`);
          console.log('–î–∞–Ω–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:', response.data);
          setDiscipline(response.data);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:', error);
        }
      };
      fetchDiscipline();
    }
  }, [id]);

  useEffect(() => {
    const fetchProfessors = async () => {
      try {
        const response = await axios.get(`http://localhost:8000/api/professors/`);
        setProfessors(response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', error);
      }
    };
    fetchProfessors();
  }, []);

  const handleRemoveProfessor = async (professorDisciplineId) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã?')) {
      try {
        await axios.delete(`http://localhost:8000/api/professor-disciplines/${professorDisciplineId}/`);
        const response = await axios.get(`http://localhost:8000/api/disciplines/${id}/`);
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:', response.data);
        setDiscipline(response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
      }
    }
  };

  const handleRemoveDiscipline = async () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) {
      try {
        await axios.delete(`http://localhost:8000/api/disciplines/${id}/`);
        alert('–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
        router.push('/disciplines'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É');
      }
    }
  };

  const handleTeachingTypeChange = (type) => {
    setTeachingTypes((prev) => ({
      ...prev,
      [type]: !prev[type],
    }));
  };

  const handleAddProfessor = async (e) => {
    e.preventDefault();
    if (!selectedProfessor || !Object.values(teachingTypes).some((checked) => checked)) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è');
      return;
    }

    try {
      const teachingTypeResponse = await axios.get(`http://localhost:8000/api/teaching-types/`);
      console.log('–¢–∏–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è:', teachingTypeResponse.data);
      const teachingTypeMap = {
        '–õ–µ–∫—Ü–∏–∏': teachingTypeResponse.data.find((tt) => tt.name === '–õ–µ–∫—Ü–∏–∏')?.id,
        '–ü—Ä–∞–∫—Ç–∏–∫–∏': teachingTypeResponse.data.find((tt) => tt.name === '–ü—Ä–∞–∫—Ç–∏–∫–∏')?.id,
        '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ': teachingTypeResponse.data.find((tt) => tt.name === '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ')?.id,
      };
      console.log('teachingTypeMap:', teachingTypeMap);

      const promises = Object.entries(teachingTypes)
        .filter(([_, checked]) => checked)
        .map(([type]) => {
          const teachingTypeId = teachingTypeMap[type];
          if (!teachingTypeId) {
            throw new Error(`–¢–∏–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
          console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            professor: parseInt(selectedProfessor),
            discipline: parseInt(id),
            teaching_type: teachingTypeId,
          });
          return axios.post(`http://localhost:8000/api/professor-disciplines/`, {
            professor: parseInt(selectedProfessor),
            discipline: parseInt(id),
            teaching_type: teachingTypeId,
          }, {
            headers: { 'Content-Type': 'application/json' }
          });
        });

      await Promise.all(promises);
      setShowForm(false);
      setSelectedProfessor('');
      setTeachingTypes({ '–õ–µ–∫—Ü–∏–∏': false, '–ü—Ä–∞–∫—Ç–∏–∫–∏': false, '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ': false });
      const response = await axios.get(`http://localhost:8000/api/disciplines/${id}/`);
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', response.data);
      setDiscipline(response.data);
      alert('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
      if (error.response) {
        console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
      }
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
    }
  };

  if (!discipline) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  const lectures = discipline.professordiscipline_set ? discipline.professordiscipline_set.filter((pd) => pd.teaching_type_detail?.name === '–õ–µ–∫—Ü–∏–∏') : [];
  const practices = discipline.professordiscipline_set ? discipline.professordiscipline_set.filter((pd) => pd.teaching_type_detail?.name === '–ü—Ä–∞–∫—Ç–∏–∫–∏') : [];
  const labs = discipline.professordiscipline_set ? discipline.professordiscipline_set.filter((pd) => pd.teaching_type_detail?.name === '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ') : [];

  const navigateTo = (path) => {
    router.push(path);
  };

  const isActive = (path) => router.pathname === path || (path === '/disciplines' && router.pathname === '/disciplines/[id]');

  return (
    <div className="min-h-screen bg-gray-100">
      <nav className="bg-black text-white p-4 flex justify-between items-center">
        <div className="space-x-4">
          <span
            className={`hover:underline cursor-pointer ${isActive('/') ? 'border-b-2 border-green-500' : ''}`}
            onClick={() => navigateTo('/')}
          >
            –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
          </span>
          <span
            className={`hover:underline cursor-pointer ${isActive('/disciplines') ? 'border-b-2 border-green-500' : ''}`}
            onClick={() => navigateTo('/disciplines')}
          >
            –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
          </span>
          <span
            className={`hover:underline cursor-pointer ${isActive('/references') ? 'border-b-2 border-green-500' : ''}`}
            onClick={() => navigateTo('/references')}
          >
            –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
          </span>
        </div>
        <div className="relative">
          <input
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
            className="p-2 rounded border border-gray-300"
          />
          <span className="absolute right-2 top-2 text-gray-500">üîç</span>
        </div>
      </nav>

      <div className="p-4 max-w-4xl mx-auto">
        <div className="bg-white text-gray-800 rounded-lg shadow p-6">
          <h1 className="text-2xl font-bold mb-4">{discipline.name}</h1>
          <div className="flex space-x-2">
            <button
              className="bg-green-500 text-white p-2 rounded hover:bg-green-600 cursor-pointer"
              onClick={() => setShowForm(true)}
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            </button>
            <button
              className="bg-red-500 text-white p-2 rounded hover:bg-red-600 cursor-pointer"
              onClick={handleRemoveDiscipline}
            >
              –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
            </button>
          </div>

          {showForm && (
            <div className="mt-4 p-4 border rounded-lg bg-gray-50">
              <h2 className="text-lg font-semibold mb-2">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</h2>
              <form onSubmit={handleAddProfessor}>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</label>
                  <select
                    value={selectedProfessor}
                    onChange={(e) => setSelectedProfessor(e.target.value)}
                    className="mt-1 p-2 w-full border rounded cursor-pointer"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</option>
                    {professors.map((prof) => (
                      <option key={prof.id} value={prof.id}>
                        {prof.last_name} {prof.first_name} {prof.third_name || ''}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">–¢–∏–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è</label>
                  {['–õ–µ–∫—Ü–∏–∏', '–ü—Ä–∞–∫—Ç–∏–∫–∏', '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ'].map((type) => (
                    <div key={type} className="flex items-center ">
                      <input
                        type="checkbox"
                        checked={teachingTypes[type]}
                        onChange={() => handleTeachingTypeChange(type)}
                        className="mr-2"
                      />
                      <label>{type}</label>
                    </div>
                  ))}
                </div>
                <div className="flex space-x-2">
                  <button
                    type="submit"
                    className="bg-green-500 text-white p-2 rounded hover:bg-green-600 cursor-pointer"
                  >
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowForm(false)}
                    className="bg-gray-500 text-white p-2 rounded hover:bg-gray-600 cursor-pointer"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </form>
            </div>
          )}
        </div>

        <div className="bg-white text-gray-800 rounded-lg shadow p-6 mt-4">
          <h2 className="text-lg font-semibold text-green-600">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</h2>
          <div className="space-y-4">
            <div>
              <h3 className="text-black font-bold">–õ–µ–∫—Ü–∏–∏</h3>
              <ul>
                {lectures.length > 0 ? (
                  lectures.map((pd) => (
                    <li key={pd.id} className="border-b py-2 flex justify-between">
                      <span
                        className="hover:text-green-600 cursor-pointer"
                        onClick={() => {
                          console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é:', pd.professor_detail);
                          if (pd.professor_detail && pd.professor_detail.id) {
                            router.push(`/professors/${pd.professor_detail.id}`);
                          } else {
                            console.error('ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', pd.professor_detail);
                            alert('–û—à–∏–±–∫–∞: ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                          }
                        }}
                      >
                        {pd.professor_detail
                          ? `${pd.professor_detail.last_name} ${pd.professor_detail.first_name} ${pd.professor_detail.third_name || ''}`
                          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
                      </span>
                      <button
                        onClick={() => handleRemoveProfessor(pd.id)}
                        className="text-red-500 hover:text-red-700 cursor-pointer"
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </li>
                  ))
                ) : (
                  <li>–ù–µ—Ç –ª–µ–∫—Ç–æ—Ä–æ–≤</li>
                )}
              </ul>
            </div>
            <div>
              <h3 className="text-black font-bold">–ü—Ä–∞–∫—Ç–∏–∫–∏</h3>
              <ul>
                {practices.length > 0 ? (
                  practices.map((pd) => (
                    <li key={pd.id} className="border-b py-2 flex justify-between">
                      <span
                        className="hover:text-green-600 cursor-pointer"
                        onClick={() => {
                          console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é:', pd.professor_detail);
                          if (pd.professor_detail && pd.professor_detail.id) {
                            router.push(`/professors/${pd.professor_detail.id}`);
                          } else {
                            console.error('ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', pd.professor_detail);
                            alert('–û—à–∏–±–∫–∞: ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                          }
                        }}
                      >
                        {pd.professor_detail
                          ? `${pd.professor_detail.last_name} ${pd.professor_detail.first_name} ${pd.professor_detail.third_name || ''}`
                          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
                      </span>
                      <button
                        onClick={() => handleRemoveProfessor(pd.id)}
                        className="text-red-500 hover:text-red-700 cursor-pointer"
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </li>
                  ))
                ) : (
                  <li>–ù–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–æ–≤</li>
                )}
              </ul>
            </div>
            <div>
              <h3 className="text-black font-bold">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ</h3>
              <ul>
                {labs.length > 0 ? (
                  labs.map((pd) => (
                    <li key={pd.id} className="border-b py-2 flex justify-between">
                      <span
                        className="hover:text-green-600 cursor-pointer"
                        onClick={() => {
                          console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é:', pd.professor_detail);
                          if (pd.professor_detail && pd.professor_detail.id) {
                            router.push(`/professors/${pd.professor_detail.id}`);
                          } else {
                            console.error('ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', pd.professor_detail);
                            alert('–û—à–∏–±–∫–∞: ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                          }
                        }}
                      >
                        {pd.professor_detail
                          ? `${pd.professor_detail.last_name} ${pd.professor_detail.first_name} ${pd.professor_detail.third_name || ''}`
                          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
                      </span>
                      <button
                        onClick={() => handleRemoveProfessor(pd.id)}
                        className="text-red-500 hover:text-red-700 cursor-pointer"
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </li>
                  ))
                ) : (
                  <li>–ù–µ—Ç –ª–∞–±–æ—Ä–∞–Ω—Ç–æ–≤</li>
                )}
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DisciplineDetail;